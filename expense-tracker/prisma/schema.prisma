// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  image         String?
  passwordHash  String?
  // Auth.js relations
  accounts      Account[]
  sessions      Session[]

  memberships   Membership[]
  expensesPaid  Expense[]  @relation("ExpensesPaid")
  expenseParticipants ExpenseParticipant[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Group {
  id           String        @id @default(cuid())
  name         String
  currency     String        @default("PKR")
  memberships  Membership[]
  expenses     Expense[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Membership {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  group     Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String
  role      Role    @default(MEMBER)
  createdAt DateTime @default(now())

  @@unique([userId, groupId])
}

model Expense {
  id            String   @id @default(cuid())
  group         Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId       String
  item          String
  date          DateTime @default(now())
  paidBy        User     @relation("ExpensesPaid", fields: [paidById], references: [id])
  paidById      String
  quantity      Int      @default(1)
  unitAmount    Int      // store in smallest currency unit (e.g., PKR rupees without decimals)
  totalAmount   Int      // computed on create/update = quantity * unitAmount unless provided
  note          String?

  participants  ExpenseParticipant[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ExpenseParticipant {
  id         String  @id @default(cuid())
  expense    Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  expenseId  String
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  @@unique([expenseId, userId])
}

// Auth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
